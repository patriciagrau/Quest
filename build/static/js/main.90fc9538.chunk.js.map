{"version":3,"sources":["dmAppointmentPlus.ts","index.tsx"],"names":["send","actions","cancel","say","text","_context","type","value","promptAndAsk","prompt","nomatch","helping","initial","states","entry","on","ENDSPEECH","ask","delay","id","grammar","person","day","time","yesNo","commands","tempCount","dmMachine","init","CLICK","welcome","maxspeech","disappointment","appointment","MAXSPEECH","cond","context","counter","target","assign","hist","who","RECOGNISED","recResult","wholeDay","final1","final2","final","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","nluRequest","fetch","Request","proxyurl","method","headers","then","data","json","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.90fc9538.chunk.js","sourcesContent":["import { MachineConfig, Action, assign, actions } from \"xstate\";\nconst { send, cancel } = actions;\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: Action<SDSContext, SDSEvent>, nomatch: string, helping:string) : MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states:{\n            prompt: {\n                entry: prompt,\n                on: {ENDSPEECH: 'ask'}\n            },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', {\n                                                            delay: 5000,\n                                                            id: 'maxsp'})],\n            },\n            nomatch: {\n                entry: say(nomatch),\n                on: { ENDSPEECH: \"prompt\" }\n            },\n            helping: {\n                entry: say(helping),\n                on: { ENDSPEECH: 'ask' }\n            }\n        }\n    })\n}\n\n// function helping(message : string) : MachineConfig<SDSContext, any, SDSEvent> {\n//     return({\n//         initial: 'prompt',\n//         states: {\n//             prompt: {\n//                 entry: message,\n//                 on: {ENDSPEECH: 'appointment.hist'}\n//             },\n//             // ask: {\n//             //     entry: [send('LISTEN')]\n//             // }\n//         }\n//     }\n\n//     )\n// }\n\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Patricia\" : { person: \"Patricia\"},\n    \"Minerva\": { person: \"Minerva S\"},\n    \"mark\": { person: \"Marc G\"},\n    \"vladislav\": { person: \"Vladislav M\"},\n    \"Jacob\": { person: \"Jacobo\"},\n    \"on Monday\": { day: \"Monday\"},\n    \"on Tuesday\": { day: \"Tuesday\"},\n    \"on Wednesday\": { day: \"Wednesday\"},\n    \"on Thursday\": { day: \"Thursday\"},\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"tomorrow\": { day: \"tomorrow\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at noon\": { time: \"12:00\"},\n}\n\nconst yesNo: { [index: string]: {yesNo: string}} = {\n\t\"yes\": { yesNo: \"yes\"},\n\t\"yup\": { yesNo: \"yes\"},\n\t\"yeah\": { yesNo: \"yes\"},\n\t\"of course\": { yesNo: \"yes\"},\n\t\"duh\": { yesNo: \"yes\"},\n\t\"no\": { yesNo: \"no\"},\n\t\"niet\": { yesNo: \"no\"},\n\t\"no way\": { yesNo: \"no\"},\n\t\"nope\": { yesNo: \"no\"},\n}\n\nconst commands = {\"stop\":\"S\", \"help\":\"S\", \"what\":'W'};\n\nlet tempCount = 0;\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: { // name of the state\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"appointment\" }, // events\n            states: { // substates\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        // stop: {  // Vlad's example\n        //     entry: say(\"Ok\"),\n        //     always: 'init'\n        // },\n        maxspeech : {\n            entry: say(\"Are you still there?\"),\n            on: {'ENDSPEECH': 'appointment.hist'}\n        },\n        disappointment: {\n            entry: say(\"Oh well... I'm disappointed\"),\n            on: {'ENDSPEECH': 'init'}\n        },\n        appointment: {\n            initial: \"who\",\n            on: {\n                MAXSPEECH: [ \n                {cond: (context) => context.counter === 3,\n                target: 'disappointment'},\n                {target: 'maxspeech',\n                actions: assign((context) => { tempCount++; return { counter: tempCount } })}, // tempCount is my var and counter is kept in context\n                ]\n            },\n            // on: {RECOGNISED: \n            // {\n            //     target: \"hist.helping\",\n            //     // actions: cancel('maxsp'),\n            //     cond: (context) => (context.recResult in commands)\n            // }\n            // },\n            states:{\n                hist: { type : 'history'},\n                who: \n                {\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"person\" in (grammar[context.recResult] || {}), \n                            actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                                    // cancel('maxsp'), \n                            target: \"day\"\n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            // ...helping(\"You can say John or Patricia\"),\n                            // target: 'hist' // If I go to stop, how do I come back here? WITH HISTORY!!\n                            target: \".helping\"\n                        },\n                        { \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                    },\n                    ...promptAndAsk(say(\"Who are you meeting with?\"), \"Sorry, I don't know them\", \"You can say John, Patricia, vladislav, and so on\")\n                },\n                day:\n                {\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"day\" in (grammar[context.recResult] || {}), \n                            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                                    // cancel('maxsp')],\n                            target: \"wholeDay\"\n        \n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \".helping\"\n                        },\n                        {   \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `OK. ${context.person}. On which day is your meeting?`\n                        })), \n                        \"Sorry, when?\", \n                        \"You can say on Monday, on Tuesday, on Wednesday, and so on\")\n                },\n                wholeDay:\n                {\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'yes' : false,\n                            // actions: cancel('maxsp'),\n                            target: \"final1\"\n        \n                        }, {\n                            cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'no' : false,\n                            // actions: cancel('maxsp'),\n                            target: \"time\"\n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \".helping\"\n                        },\n                        {   cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. Will it take the whole day?`\n                    })),\"Sorry, yes or no?\",\n                    \"You should answer yes or no\"\n                    ),\n                },\n                final1:\n                {\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'yes' : false,\n                            // actions: cancel('maxsp'),\n                            target: \"final\"\n        \n                        }, {\n                            cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'no' : false,\n                            // actions: cancel('maxsp'),\n                            target: \"who\"\n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \".helping\"\n                        },\n                        { \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                    type: \"SPEAK\",\n                    value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                })), \"Sorry, yes or no?\",\n                    \"You should answer yes if it will take the whole day or no otherwise\"\n                    ),\n                },\n                time: \n                {\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"time\" in (grammar[context.recResult] || {}), \n                            actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                                    //  cancel('maxsp'),],\n                            target: \"final2\"\n        \n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \".helping\"\n                        },\n                        { \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({\n                    type: \"SPEAK\",\n                    value: `OK. What time is your meeting?`\n                })), \"Sorry, could you repeat that?\",\n                    \"You can say at ten, at eleven or at noon\"\n                    ),\n                },\n                final2: \n                {\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'yes' : false,\n                            // actions: cancel('maxsp'),\n                            target: \"final\"\n        \n                        }, {\n                            cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'no' : false,\n                            // actions: cancel('maxsp'),\n                            target: \"who\"\n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \".helping\"\n                        },\n                        { \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                    type: \"SPEAK\",\n                    value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n                    \"Sorry, yes or no?\",\n                    \"You should say yes or no\"\n                    ),\n                },\n                final:\n                {\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({ \n                                type: \"SPEAK\",\n                                value: `Your appointment has been created.`\n                            })),\n                        }\n                    }\n                }\n            }\n        }   \n    } // final closing, do not touch!!!!\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, State, actions } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointmentPlus\";\nconst { send, cancel } = actions;\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: {target : 'idle', actions: cancel('maxsp')},\n                        // RECOGNISED: 'idle',\n                        MAXSPEECH: 'idle',\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://miauppointments.herokuapp.com/model/parse/' \nexport const nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}