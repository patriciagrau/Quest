{"version":3,"sources":["dmAppointment.ts","dmOthers.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","yesNo","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","testState","who","RECOGNISED","cond","context","recResult","actions","assign","target","ask","nomatch","wholeDay","final1","final2","final","appointment","dmAppointment","toDoItem","timer","invoking_rasa","invoke","id","src","event","nluRequest","onDone","console","log","data","intent_res","onError","choosing_intent","intent","name","redirecting","answer","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","fetch","Request","proxyurl","method","headers","then","json","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.fd403315.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Minerva\": { person: \"Minerva S\"},\n    \"your mom\": { person: \"my mom, Patricia\"},\n    \"mark\": { person: \"Marc G\"},\n    \"vladislav\": { person: \"Vladislav M\"},\n    \"Jacob\": { person: \"Jacobo\"},\n    \"on Monday\": { day: \"Monday\"},\n    \"on Tuesday\": { day: \"Tuesday\"},\n    \"on Wednesday\": { day: \"Wednesday\"},\n    \"on Thursday\": { day: \"Thursday\"},\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"tomorrow\": { day: \"tomorrow\" },\n    \"at 9\": { time: \"9:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at noon\": { time: \"12:00\"},\n}\n\nconst yesNo: { [index: string]: {yesNo: string}} = {\n\t\"yes\": { yesNo: \"yes\"},\n\t\"yup\": { yesNo: \"yes\"},\n\t\"yeah\": { yesNo: \"yes\"},\n\t\"of course\": { yesNo: \"yes\"},\n\t\"duh\": { yesNo: \"yes\"},\n\t\"no\": { yesNo: \"no\"},\n\t\"niet\": { yesNo: \"no\"},\n\t\"no way\": { yesNo: \"no\"},\n\t\"nope\": { yesNo: \"no\"},\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: { // name of the state\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" }, // events\n            states: { // substates\n                prompt: { entry: say(\"Let's create an appointment\") },\n                testState: { entry: say(\"Hey!\")}\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    // cond: (context) => grammar[context.recResult].person !== undefined,\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}), // It checks if the person is in the grammar\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }), // The computer keeps the information in the object context\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: { // program listens to you\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n\t\t\t\tRECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}), // It checks if the day is in the grammar\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }), // The computer keeps the information in the object context\n                    target: \"wholeDay\"\n\n                },\n                { target: \".nomatch\" }]\n\t\t\t\t\n\t\t\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({ // We need to access the context that has the info. Similar to \"say\" function\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\"}\n                },\n                ask: { // program listens to you\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, when?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        wholeDay: {\n            initial: \"prompt\",\n            on: {\n\t\t\t\tRECOGNISED: [{\n                    // cond: (context) => context.recResult === 'yes',\n                    cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'yes' : false,\n                    target: \"final1\"\n\n                }, {\n\t\t\t\t\t// cond: (context) => context.recResult === 'no',\n\t\t\t\t\tcond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'no' : false,\n\t\t\t\t\ttarget: \"time\"\n\t\t\t\t},\n                { target: \".nomatch\" }]\n\t\t\t\t\n\t\t\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({ // We need to access the context that has the info. Similar to \"say\" function\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. Will it take the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\"}\n                },\n                ask: { // program listens to you\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, yes or no?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        final1: {\n            initial: \"prompt\",\n            on: {\n\t\t\t\tRECOGNISED: [{\n                    //cond: (context) => context.recResult === 'yes',\n                    cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'yes' : false,\n                    target: \"final\"\n\n                }, {\n\t\t\t\t\t//cond: (context) => context.recResult === 'no',\n\t\t\t\t\tcond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'no' : false,\n\t\t\t\t\ttarget: \"who\"\n\t\t\t\t},\n                { target: \".nomatch\" }]\n\t\t\t\t\n\t\t\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({ // We need to access the context that has the info. Similar to \"say\" function\n                        type: \"SPEAK\",\n                        value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n                    on: { ENDSPEECH: \"ask\"}\n                },\n                ask: { // program listens to you\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, yes or no?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        time: {\n            initial: \"prompt\",\n            on: {\n\t\t\t\tRECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}), // It checks if the day is in the grammar\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }), // The computer keeps the information in the object context\n                    target: \"final2\"\n\n                },\n                { target: \".nomatch\" }]\n\t\t\t\t\n\t\t\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({ // We need to access the context that has the info. Similar to \"say\" function\n                        type: \"SPEAK\",\n                        value: `OK. What time is your meeting?`\n                    })),\n                    on: { ENDSPEECH: \"ask\"}\n                },\n                ask: { // program listens to you\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, could you repeat that?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        final2: {\n            initial: \"prompt\",\n            on: {\n\t\t\t\tRECOGNISED: [{\n                    // cond: (context) => context.recResult === 'yes',\n                    cond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'yes' : false,\n                    target: \"final\"\n\n                }, {\n\t\t\t\t\t// cond: (context) => context.recResult === 'no',\n\t\t\t\t\tcond: (context) => yesNo[context.recResult] ? yesNo[context.recResult].yesNo === 'no' : false,\n\t\t\t\t\ttarget: \"who\"\n\t\t\t\t},\n                { target: \".nomatch\" }]\n\t\t\t\t\n\t\t\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({ // We need to access the context that has the info. Similar to \"say\" function\n                        type: \"SPEAK\",\n                        value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: \"ask\"}\n                },\n                ask: { // program listens to you\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry, yes or no?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                }\n            }\n        },\n        final: {\n            initial: \"prompt\",\n            /*\n            on: {\n\t\t\t\tENDSPEECH: \"init\"\n\t\t\t}, */\n            states: {\n                prompt: {\n                    entry: send((context) => ({ \n                        type: \"SPEAK\",\n                        value: `Your appointment has been created.`\n                    })),\n                    //on: { ENDSPEECH: \"ask\"}\n                }\n            }\n        },\n        \n    } // final closing, do not touch!!!!\n})\n","import { dmMachine as dmAppointment } from \"./dmAppointment.ts\";\n\n\nimport { MachineConfig, send, Action, assign } from \"xstate\"; \n\n\nimport {nluRequest} from \"./index.tsx\"; // file extension not mandatory\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst options: { [index: string]: { choose: string} } = {\n    \"appointment\": { choose: \"appointment\" },\n    \"appointments\": { choose: \"appointment\" },\n    \"make an appointment\": { choose: \"appointment\" },\n    \"create an appointment\": { choose: \"appointment\" },\n    \"to do\": { choose: \"to_do_item\"},\n    \"TO DO\": { choose: \"to_do_item\"},\n    \"timer\": { choose: \"timer\"}\n\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n\tinitial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: { \n            initial: \"prompt\",\n            on: {\n\t\t\t\tRECOGNISED: {target: \"invoking_rasa\"} /* [{\n                    cond: (context) => options[context.recResult] ? options[context.recResult].choose === 'appointment' : false,\n                    target: \"appointment\"\n\n                }, {\n\t\t\t\t\tcond: (context) => options[context.recResult] ? options[context.recResult].choose === 'to do item' : false,\n\t\t\t\t\ttarget: \"toDoItem\"\n\t\t\t\t}, {\n\t\t\t\t\tcond: (context) => options[context.recResult] ? options[context.recResult].choose === \"timer\" : false,\n\t\t\t\t\ttarget: \"timer\"\n\t\t\t\t}, \n                { target: \".nomatch\" }] */\n\t\t\t\t},\n            states: {\n                prompt: { \n\t\t\t\t\tentry: say(\"What would you like to do?\"),\n\t\t\t\t\ton: { ENDSPEECH: \"ask\" } },\n                ask: { // program listens to you\n                    entry: listen()\n\t\t\t\t},\n                nomatch: {\n                    entry: say(\"Pick appointment, to do item or timer\"),\n                    on: { ENDSPEECH: \"prompt\" }\n            }\n\t\t}\n        },\n        appointment: { \n\t\t\t...dmAppointment\n\t\t},\n        toDoItem: {\n\t\t\tinitial: \"prompt\",\n\t\t\tstates: { \n\t\t\t\tprompt: {entry: say(\"Let's create a to do item!\") }\n\t\t}\n\t\t},\n\t\ttimer: {\n\t\t\tinitial: \"prompt\",\n\t\t\tstates: {\n\t\t\t\tprompt: {entry: say(\"Let's create a timer!\") }\n\t\t\t\t}\n\t\t},\n\t\tinvoking_rasa: {\n\t\t\tinvoke: {\n\t\t\t\tid: 'rasa',\n\t\t\t\tsrc: (context, event) => nluRequest(context.recResult), // Vlad had (context, event) => duckQuery(context.query)\n\t\t\t\tonDone: {\n\t\t\t\t\ttarget: \"choosing_intent\", \n\t\t\t\t// 'answer',\n\t\t\t\t\tactions: assign((context, event) => { console.log(event.data); return { intent_res: event.data } }) // saving?\n\t\t\t\t\t},\n\t\t\t\tonError: {\n\t\t\t\t\ttarget: 'welcome',\n\t\t\t\t\t// actions\n\t\t\t\t\t}\n\t\t}\n\t\t},\n\t\tchoosing_intent: {\n\t\t\tinitial: \"redirecting\",\n\t\t\ton: {\n\t\t\t\tENDSPEECH: [{\n                    cond: (context) =>  context.intent_res.intent.name === 'appointment',\n                    target: \"appointment\"\n\n                }, {\n\t\t\t\t\tcond: (context) =>  context.intent_res.intent.name === 'to_do_item',\n\t\t\t\t\ttarget: \"toDoItem\"\n\t\t\t\t}, {\n\t\t\t\t\tcond: (context) =>  context.intent_res.intent.name === 'timer',\n\t\t\t\t\ttarget: \"timer\"\n\t\t\t\t}, \n                { target: \".nomatch\" }]\n\t\t\t},\n\t\t\tstates: {\n\t\t\t\tnomatch: {\n\t\t\t\t\tentry: say(\"Pick appointment, to do item or timer\"),\n\t\t\t\t\ton: { ENDSPEECH: \"..welcome\" }\n\t\t\t\t\t},\n\t\t\t\tredirecting: {\n\t\t\t\t\tentry: say(\"Redirecting...\")}\n\t\t\t}\n\t\t},\n\t\tanswer : {\n\t\t\tentry: send((context: SDSContext) => ({\n\t\t\t\ttype: \"SPEAK\", value: `${context.intent_res.intent.name}`\n\t\t\t\t})),\n\t\t\ton: { ENDSPEECH: 'init'}\n\t\t}\n        } // final closing, do not touch!!!!\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmOthers\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://miauppointments.herokuapp.com/model/parse/' \nexport const nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}